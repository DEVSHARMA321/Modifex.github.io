{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","react_default","a","createElement","class","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","alert","props","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","dist","to","title","aria-label","aria-current","bar","href","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newText","showAlert","button1","lowerCase","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","document","getElementById","textContent","innerHTML","cancel","lowerCaseword","capitalizeLetter","split","i","length","substring","join","defaultProps","App","setMode","_useState3","_useState4","greenMode","setgreenMode","_useState5","_useState6","setAlert","message","setTimeout","body","toggleGreenmode","Alert_alert","react_router_dist","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.449c433e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      \r\n      <div class=\"accordion mt-5\" id=\"accordionExample\">\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\" id=\"headingOne\">\r\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\" id=\"headingThree\">\r\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    {capitalize(props.alert.type)} : {props.alert.msg}\r\n  {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        \r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        \r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.bar}</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                Categories\r\n              </a>\r\n              <ul className=\"dropdown-menu\">\r\n                <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                <li><hr className=\"dropdown-divider\" /></li>\r\n                <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n        {/*green mode button*/}\r\n\r\n      {/* <div class={`form-check form-switch text-${props.greenMode === 'success' ? 'light' : 'success'}`}>\r\n  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleGreenmode}/>\r\n  <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green Mode &nbsp; &nbsp; </label>\r\n  </div> */}\r\n  \r\n  {/*dark mode button*/}\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  bar: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"SET A TITLE\",\r\n  bar: \"SET A BUTTON TO CLICK\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n\r\n\r\n  const handleclickUP = () => {\r\n    console.log(\"Uppercase button was clicked\");\r\n    setText('WHY ARE YOU CLICKING THE BELOW BUTTON BITCH');\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\",\"success\");\r\n  }\r\n\r\n  const handletoLC=()=>{\r\n    let lowerCase = text.toLowerCase();\r\n    setText(lowerCase);\r\n    props.showAlert(\"Converted to lowercase\",\"success\");\r\n  }\r\n  const handleOnChange = (event) => {\r\n    console.log(\"ON CHANGE\");\r\n    setText(event.target.value)\r\n  };\r\n  const [text, setText] = useState('');\r\n\r\n  const handleClear =()=>{\r\n    setText(\"\");\r\n    props.showAlert(\"Text cleared\",\"success\")\r\n  }\r\n\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(msg);\r\n    const toogle = document.getElementById('toggle')\r\n    if (toogle.textContent === \"Speak\") {\r\n        toogle.innerHTML = \"Stop\"\r\n        props.showAlert(\"Text reading started\",\"success\");\r\n    }\r\n    else {\r\n        toogle.innerHTML = \"Speak\"\r\n        if (toogle.innerHTML === \"Speak\"){\r\n            window.speechSynthesis.cancel()\r\n            props.showAlert(\"Text reading stopped\",\"success\")\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n  }\r\n  \r\n  // const[textChange,setTextChange]= useState(\"Enable Dark mode\")\r\n\r\n\r\n  // const[myStyle, setMyStyle] = useState({\r\n  //   color:\"black\" ,\r\n  //   backgroundColor:\"white\"\r\n  // })\r\n  // const darkMode=()=>{\r\n  //   if(myStyle.color===\"black\"){\r\n  //     setMyStyle({\r\n  //       color:\"white\" ,\r\n  //       backgroundColor:\"black\" ,\r\n  //       border:\"1px solid white\" , \r\n  //       borderRadius:\"1rem\"\r\n  //     })\r\n  //     setTextChange(\"Enable Light Mode\")\r\n  //   }\r\n  //   else{\r\n  //     setMyStyle({\r\n  //       backgroundColor:\"white\",\r\n  //   color:\"black\"\r\n  //     })\r\n  //     setTextChange(\"Enable Dark Mode\")\r\n  //   }\r\n\r\n\r\n  // }\r\n\r\n  \r\n  const handleCapitalizeFirstLetter=()=> {\r\n    const lowerCaseword= text.toLowerCase();\r\n    const capitalizeLetter= lowerCaseword.charAt(0).toUpperCase() + lowerCaseword.slice(1);\r\n    setText(capitalizeLetter);\r\n    props.showAlert(\"First letter has been capitalized\",\"success\");\r\n  }\r\n\r\n  const handleFirstletterofeachword=()=>{\r\n\r\n    const word=text.split(\" \");\r\n    for(let i=0;i<word.length;i++){\r\n     word[i] = word[i][0].toUpperCase()+word[i].substring(1);\r\n    }\r\n     setText(word.join(\" \"));\r\n    props.showAlert(\"First letter of each word has been capitalized\",\"success\");\r\n  }\r\n\r\n  //setText({text:'HELLO DEV'});  - this is the correct way to assign values to variables or consts\r\n\r\n  return (\r\n    <>\r\n    <div style={{color:props.mode==='dark'?'white':'black'}}>\r\n   \r\n      <h2 className='my-5'>{props.heading}</h2>\r\n      \r\n      <div className=\"mb-3 my-3\">\r\n        <textarea className=\"form-control\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'gray':'white' , color:props.mode==='dark'?'white':'black'}}></textarea>\r\n      </div>\r\n\r\n      { /* BUTTONS */ } \r\n     <button className=\"btn btn-danger mx-2\" onClick={handleclickUP}>{props.button1}</button>\r\n      <button className=\"btn btn-primary \" onClick={handletoLC}>Lower Case</button>\r\n      <button className=\"btn btn-primary my-2 ms-2\" onClick={handleClear}>Clear</button>\r\n\r\n      <button className=\"btn btn-success mx-2\" onClick={speak} id=\"toggle\">Speak</button>\r\n      <button className=\"btn btn-primary\" onClick={handleCapitalizeFirstLetter}>First Letter Capitalize</button>\r\n      <button className=\"btn btn-dark ms-2 my-2\" onClick={handleFirstletterofeachword}>Capitalize First Letter of Each Word</button>\r\n    </div>\r\n\r\n    <div className=\"container my-4 \" style={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h2>Your text summary </h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <h2 className=\"mt-4\">Reading Time</h2>\r\n      <p>{(text.split(\" \").length)*0.008} minutes to read</p>\r\n\r\n      <h2 className=\"mt-4\">Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something to preview your text here\"}</p>\r\n\r\n    {/* <button className=\"btn btn-dark mb-2\" onClick={darkMode} style={myStyle}>{textChange}</button> */}\r\n    \r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport { ReactDOM } from \"react-dom/client\";\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n\nfunction App() {\n  \n  const[mode,setMode]=useState('light');\n  const[greenMode,setgreenMode]=useState('light');\n  \n  const[alert,setAlert]=useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{ \n      setAlert(null);\n    },1500);\n  }\n\n \n\n  const toggleMode =()=>{\n\n    if(mode ==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor=\"#1c0042\";\n      showAlert(\"Dark mode has been enabled\",\"success\"); \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";showAlert(\"Light mode has been enabled\",\"success\"); \n\n    }\n\n  };\n\n  const toggleGreenmode=()=>{\n    if(greenMode ==='light'){\n      setgreenMode('success')\n      document.body.style.backgroundColor=\"#green\";\n      // showAlert(\"Green mode has been enabled\",\"success\");\n    }\n    else{\n      setgreenMode('light');\n      document.body.style.backgroundColor=\"white\";\n      // showAlert(\"Light mode has been enabled\",\"success\");\n    }\n  };\n\n  return (\n    <BrowserRouter>\n\n<Navbar title=\"DEV x SHARMA\" bar=\"Home\" mode={mode} toggleMode={toggleMode} toggleGreenmode={toggleGreenmode}/>\n\n    <Alert alert={alert}/>\n    <div className='container'>\n\n    <Routes>\n      <Route path=\"/about\" element={<About />}></Route>\n\n      <Route path=\"/\" element={ <Textform button1=\"Upper Case\" heading=\"Enter Your Text\" mode={mode} showAlert={showAlert}/>     }></Route>\n\n    </Routes>\n           \n\n    </div>\n      </BrowserRouter>\n  );\n  }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}