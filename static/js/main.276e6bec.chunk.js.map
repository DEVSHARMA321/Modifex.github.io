{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["alert","props","react_default","a","createElement","class","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","className","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","bar","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","newText","showAlert","button1","lowerCase","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","document","getElementById","textContent","innerHTML","cancel","lowerCaseword","capitalizeLetter","split","i","length","substring","join","defaultProps","App","setMode","_useState3","_useState4","greenMode","setgreenMode","_useState5","_useState6","setAlert","message","setTimeout","body","toggleGreenmode","Alert_alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.276e6bec.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    {capitalize(props.alert.type)} : {props.alert.msg}\r\n  {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        \r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        \r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.bar}</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">About</a>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                Categories\r\n              </a>\r\n              <ul className=\"dropdown-menu\">\r\n                <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                <li><hr className=\"dropdown-divider\" /></li>\r\n                <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n        {/*green mode button*/}\r\n\r\n      {/* <div class={`form-check form-switch text-${props.greenMode === 'success' ? 'light' : 'success'}`}>\r\n  <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleGreenmode}/>\r\n  <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green Mode &nbsp; &nbsp; </label>\r\n  </div> */}\r\n  \r\n  {/*dark mode button*/}\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  bar: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"SET A TITLE\",\r\n  bar: \"SET A BUTTON TO CLICK\"\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n\r\n\r\n  const handleclickUP = () => {\r\n    console.log(\"Uppercase button was clicked\");\r\n    setText('WHY ARE YOU CLICKING THE BELOW BUTTON BITCH');\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\",\"success\");\r\n  }\r\n\r\n  const handletoLC=()=>{\r\n    let lowerCase = text.toLowerCase();\r\n    setText(lowerCase);\r\n    props.showAlert(\"Converted to lowercase\",\"success\");\r\n  }\r\n  const handleOnChange = (event) => {\r\n    console.log(\"ON CHANGE\");\r\n    setText(event.target.value)\r\n  };\r\n  const [text, setText] = useState('');\r\n\r\n  const handleClear =()=>{\r\n    setText(\"\");\r\n    props.showAlert(\"Text cleared\",\"success\")\r\n  }\r\n\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance(text);\r\n    window.speechSynthesis.speak(msg);\r\n    const toogle = document.getElementById('toggle')\r\n    if (toogle.textContent === \"Speak\") {\r\n        toogle.innerHTML = \"Stop\"\r\n        props.showAlert(\"Text reading started\",\"success\");\r\n    }\r\n    else {\r\n        toogle.innerHTML = \"Speak\"\r\n        if (toogle.innerHTML === \"Speak\"){\r\n            window.speechSynthesis.cancel()\r\n            props.showAlert(\"Text reading stopped\",\"success\")\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n  }\r\n  \r\n  // const[textChange,setTextChange]= useState(\"Enable Dark mode\")\r\n\r\n\r\n  // const[myStyle, setMyStyle] = useState({\r\n  //   color:\"black\" ,\r\n  //   backgroundColor:\"white\"\r\n  // })\r\n  // const darkMode=()=>{\r\n  //   if(myStyle.color===\"black\"){\r\n  //     setMyStyle({\r\n  //       color:\"white\" ,\r\n  //       backgroundColor:\"black\" ,\r\n  //       border:\"1px solid white\" , \r\n  //       borderRadius:\"1rem\"\r\n  //     })\r\n  //     setTextChange(\"Enable Light Mode\")\r\n  //   }\r\n  //   else{\r\n  //     setMyStyle({\r\n  //       backgroundColor:\"white\",\r\n  //   color:\"black\"\r\n  //     })\r\n  //     setTextChange(\"Enable Dark Mode\")\r\n  //   }\r\n\r\n\r\n  // }\r\n\r\n  \r\n  const handleCapitalizeFirstLetter=()=> {\r\n    const lowerCaseword= text.toLowerCase();\r\n    const capitalizeLetter= lowerCaseword.charAt(0).toUpperCase() + lowerCaseword.slice(1);\r\n    setText(capitalizeLetter);\r\n    props.showAlert(\"First letter has been capitalized\",\"success\");\r\n  }\r\n\r\n  const handleFirstletterofeachword=()=>{\r\n\r\n    const word=text.split(\" \");\r\n    for(let i=0;i<word.length;i++){\r\n     word[i] = word[i][0].toUpperCase()+word[i].substring(1);\r\n    }\r\n     setText(word.join(\" \"));\r\n    props.showAlert(\"First letter of each word has been capitalized\",\"success\");\r\n  }\r\n\r\n  //setText({text:'HELLO DEV'});  - this is the correct way to assign values to variables or consts\r\n\r\n  return (\r\n    <>\r\n    <div style={{color:props.mode==='dark'?'white':'black'}}>\r\n   \r\n      <h2 className='my-5'>{props.heading}</h2>\r\n      \r\n      <div className=\"mb-3 my-3\">\r\n        <textarea className=\"form-control\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'gray':'white' , color:props.mode==='dark'?'white':'black'}}></textarea>\r\n      </div>\r\n\r\n      { /* BUTTONS */ } \r\n     <button className=\"btn btn-danger mx-2\" onClick={handleclickUP}>{props.button1}</button>\r\n      <button className=\"btn btn-primary \" onClick={handletoLC}>Lower Case</button>\r\n      <button className=\"btn btn-primary my-2 ms-2\" onClick={handleClear}>Clear</button>\r\n\r\n      <button className=\"btn btn-success mx-2\" onClick={speak} id=\"toggle\">Speak</button>\r\n      <button className=\"btn btn-primary\" onClick={handleCapitalizeFirstLetter}>First Letter Capitalize</button>\r\n      <button className=\"btn btn-dark ms-2 my-2\" onClick={handleFirstletterofeachword}>Capitalize First Letter of Each Word</button>\r\n    </div>\r\n\r\n    <div className=\"container my-4 \" style={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h2>Your text summary </h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <h2 className=\"mt-4\">Reading Time</h2>\r\n      <p>{(text.split(\" \").length)*0.008} minutes to read</p>\r\n\r\n      <h2 className=\"mt-4\">Preview</h2>\r\n      <p>{text.length>0?text:\"Enter something to preview your text here\"}</p>\r\n\r\n    {/* <button className=\"btn btn-dark mb-2\" onClick={darkMode} style={myStyle}>{textChange}</button> */}\r\n    \r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\n// import { ReactDOM } from \"react-dom/client\";\n// import {BrowserRouter, Route, Routes} from \"react-router-dom\";\nimport { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n\nfunction App() {\n  \n  const[mode,setMode]=useState('light');\n  const[greenMode,setgreenMode]=useState('light');\n  \n  const[alert,setAlert]=useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{ \n      setAlert(null);\n    },1500);\n  }\n\n \n\n  const toggleMode =()=>{\n\n    if(mode ==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor=\"#1c0042\";\n      showAlert(\"Dark mode has been enabled\",\"success\"); \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";showAlert(\"Light mode has been enabled\",\"success\"); \n\n    }\n\n  };\n\n  const toggleGreenmode=()=>{\n    if(greenMode ==='light'){\n      setgreenMode('success')\n      document.body.style.backgroundColor=\"#green\";\n      // showAlert(\"Green mode has been enabled\",\"success\");\n    }\n    else{\n      setgreenMode('light');\n      document.body.style.backgroundColor=\"white\";\n      // showAlert(\"Light mode has been enabled\",\"success\");\n    }\n  };\n\n  return (\n    <>\n    {/*  <BrowserRouter> */}\n\n<Navbar title=\"DEV x SHARMA\" bar=\"Home\" mode={mode} toggleMode={toggleMode} toggleGreenmode={toggleGreenmode}/>\n\n    <Alert alert={alert}/>\n    <div className='container'>\n\n    {/* <Routes> */}\n      {/* <Route path=\"/about\" element={ */}\n        {/* <About /> */}\n         {/* }></Route> */}\n\n      {/* <Route path=\"/\" element={ */}\n         <Textform button1=\"Upper Case\" heading=\"Enter Your Text\" mode={mode} showAlert={showAlert}/>    \n          {/* }></Route> */}\n\n    {/* </Routes> */}\n           \n\n    </div>\n      {/* </BrowserRouter> */}\n      </>\n  );\n  }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}